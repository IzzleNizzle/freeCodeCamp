{"index.js":"function destroyer(arr) {\n  // console.log(arguments[1]);\n    // create data variable to store indexes of variables that need to be removed\n    let deleteMe = [];\n  \n    // loop through the array as many times as there are more than one arguments sent to this function\n    for (let i = 1; i < arguments.length; i++) {\n      // console.log(arguments[i]);\n      // console.log(i);\n  \n      // loop through entire array and find matches of the argument[i] variable\n      // I feel like this was a cheap fix, i want to be able to go back and just do it differnet like this. \n      // copy the array first of all, run the loops off the object that is not being changed, not when it is being changed. \n      // if you run a loop on an array that is being changed, you run the risk of an off by one error.\n      for (let j = 0; j <= arr.length; j ++){\n        // using indexOf method, find indexes of provided array that match the additional arguments\n      if (arr.indexOf(arguments[i]) >= 0) {\n        // console.log(arguments[i]);\n        arr.splice(arr.indexOf(arguments[i]), 1);\n        // when a match is found, add the index to the data variable\n        // deleteMe.push(arr.indexOf(arguments[i]));\n      }\n      }\n      \n   \n    }\n      console.log (arr);\n  \n    // once all filtering is finished, sort data variable from highest to lowest\n    // will this sorting be necessary? yes\n    // function sortNumber(a,b) {\n    //   return b - a;\n    // }\n  \n    // deleteMe = deleteMe.sort(sortNumber);\n  \n    // console.log (deleteMe);\n    // console.log(arr)\n    // console.log(deleteMe)\n    \n    // loop through data array and remove each index of the array\n    // for (let i = 0; i < deleteMe.length; i++) {\n    //   arr.splice(deleteMe[i], 1);\n    // }\n    // console.log(arr)\n    // Return cleansed array //\n    return arr;\n  }\n  \n  destroyer([2, 3, 2, 3], 2, 3);"}